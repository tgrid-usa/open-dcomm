const e=[{urls:"stun:stun.relay.metered.ca:80"},{urls:"turn:global.relay.metered.ca:80",username:"32b0819c14efab2f2f28735a",credential:"1ALjeGjsSRk5BuC4"},{urls:"turn:global.relay.metered.ca:80?transport=tcp",username:"32b0819c14efab2f2f28735a",credential:"1ALjeGjsSRk5BuC4"},{urls:"turn:global.relay.metered.ca:443",username:"32b0819c14efab2f2f28735a",credential:"1ALjeGjsSRk5BuC4"},{urls:"turns:global.relay.metered.ca:443?transport=tcp",username:"32b0819c14efab2f2f28735a",credential:"1ALjeGjsSRk5BuC4"}];class n{constructor(e,n){this.peerConnection=null,this.localStream=null,this.onIceCandidate=e,this.onTrack=n,this.iceCandidates=[]}async createPeerConnection(){const n={iceServers:e,iceTransportPolicy:"all",bundlePolicy:"max-bundle",rtcpMuxPolicy:"require",iceCandidatePoolSize:0};return this.peerConnection=new RTCPeerConnection(n),this.peerConnection.onicecandidate=this.onIceCandidate,this.peerConnection.oniceconnectionstatechange=()=>{console.log("ICE connection state:",this.peerConnection.iceConnectionState),"failed"===this.peerConnection.iceConnectionState&&(console.log("Attempting to restart ICE"),this.peerConnection.restartIce())},this.peerConnection.onicegatheringstatechange=()=>{console.log("ICE gathering state:",this.peerConnection.iceGatheringState)},this.peerConnection.onsignalingstatechange=()=>{console.log("Signaling state:",this.peerConnection.signalingState)},this.peerConnection.onconnectionstatechange=()=>{console.log("Connection state:",this.peerConnection.connectionState),"failed"===this.peerConnection.connectionState&&(console.log("Connection failed. Attempting to recreate the peer connection."),this.recreatePeerConnection())},this.peerConnection.ontrack=this.onTrack,this.peerConnection}async recreatePeerConnection(){this.peerConnection&&this.peerConnection.close(),await this.createPeerConnection(),this.localStream&&this.localStream.getTracks().forEach((e=>this.peerConnection.addTrack(e,this.localStream)))}async addIceCandidate(e){try{this.peerConnection.remoteDescription&&"closed"!==this.peerConnection.iceConnectionState?(await this.peerConnection.addIceCandidate(e),console.log("Added ICE candidate successfully")):(this.iceCandidates.push(e),console.log("ICE candidate buffered"))}catch(e){console.error("Error adding received ICE candidate",e)}}async startCall(e,n){this.localStream=e,this.localStream.getTracks().forEach((e=>{console.log("Adding local track to peer connection:",e.kind),this.peerConnection.addTrack(e,this.localStream)}));const t=await this.peerConnection.createOffer({offerToReceiveAudio:!0,offerToReceiveVideo:n});return await this.peerConnection.setLocalDescription(t),console.log("Local description set:",t.type),t}async handleIncomingCall(e,n){try{console.log("Handling incoming call. Current signaling state:",this.peerConnection.signalingState),"stable"!==this.peerConnection.signalingState&&console.warn("PeerConnection is not in stable state. Current state:",this.peerConnection.signalingState),this.localStream=n,this.localStream.getTracks().forEach((e=>{console.log("Adding local track to peer connection:",e.kind),this.peerConnection.addTrack(e,this.localStream)})),console.log("Setting remote description (offer)"),await this.peerConnection.setRemoteDescription(new RTCSessionDescription(e)),console.log("Remote description set:",e.type),console.log("Creating answer");const t=await this.peerConnection.createAnswer();console.log("Setting local description (answer)"),await this.peerConnection.setLocalDescription(t),console.log("Local description set:",t.type),console.log(`Adding ${this.iceCandidates.length} buffered ICE candidates`);for(const e of this.iceCandidates)await this.peerConnection.addIceCandidate(e);return this.iceCandidates=[],t}catch(e){throw console.error("Error in handleIncomingCall:",e),e}}}window.WebRTCHandler=n;